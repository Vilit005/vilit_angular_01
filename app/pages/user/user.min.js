/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/user/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/css-loader/index.js?!./node_modules/postcss-loader/src/index.js?!./src/user/index.css":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--4-1!./node_modules/postcss-loader/src??postcss!./src/user/index.css ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, "", ""]);

// exports


/***/ }),

/***/ "./node_modules/css-loader/index.js?!./node_modules/postcss-loader/src/index.js?!./src/user/user-page.pcss":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--4-1!./node_modules/postcss-loader/src??postcss!./src/user/user-page.pcss ***!
  \****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".container {\r\n    max-width: 97%;\r\n    padding: 15px;\r\n    margin: 0 auto;\r\n}\r\n.filter-ipt{\r\n    width:66.5%;\r\n}\r\n.filter-btn{\r\n    width:18%;\r\n}", ""]);

// exports


/***/ }),

/***/ "./node_modules/css-loader/lib/css-base.js":
/*!*************************************************!*\
  !*** ./node_modules/css-loader/lib/css-base.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),

/***/ "./node_modules/style-loader/lib/addStyles.js":
/*!****************************************************!*\
  !*** ./node_modules/style-loader/lib/addStyles.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getTarget = function (target, parent) {
  if (parent){
    return parent.querySelector(target);
  }
  return document.querySelector(target);
};

var getElement = (function (fn) {
	var memo = {};

	return function(target, parent) {
                // If passing function in options, then use it for resolve "head" element.
                // Useful for Shadow Root style i.e
                // {
                //   insertInto: function () { return document.querySelector("#foo").shadowRoot }
                // }
                if (typeof target === 'function') {
                        return target();
                }
                if (typeof memo[target] === "undefined") {
			var styleTarget = getTarget.call(this, target, parent);
			// Special case to return head of iframe instead of iframe itself
			if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[target] = styleTarget;
		}
		return memo[target]
	};
})();

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(/*! ./urls */ "./node_modules/style-loader/lib/urls.js");

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
        if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertAt.before, target);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}

	if(options.attrs.nonce === undefined) {
		var nonce = getNonce();
		if (nonce) {
			options.attrs.nonce = nonce;
		}
	}

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function getNonce() {
	if (false) {}

	return __webpack_require__.nc;
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = typeof options.transform === 'function'
		 ? options.transform(obj.css) 
		 : options.transform.default(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),

/***/ "./node_modules/style-loader/lib/urls.js":
/*!***********************************************!*\
  !*** ./node_modules/style-loader/lib/urls.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),

/***/ "./src/common/app.js":
/*!***************************!*\
  !*** ./src/common/app.js ***!
  \***************************/
/*! exports provided: InitApp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InitApp", function() { return InitApp; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ "./src/common/util.js");
/* harmony import */ var _i18n__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./i18n */ "./src/common/i18n.js");
/* harmony import */ var _mdle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mdle */ "./src/common/mdle.js");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./global */ "./src/common/global.js");
/* harmony import */ var _provider_filters__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../provider/filters */ "./src/provider/filters.js");





/**
 * Init the RDO var into window.
 */

if (!window.utag) {
  window.utag = {
    data: {
      page_name: "",
      page_name_en: "",
      page_language: "",
      page_title: "",
      page_url: "",
      page_type: "application",
      customer_id: "",
      customer_type: ""
    }
  };
  window.mobile_switch_profile = false;
}

var InitApp = function InitApp() {
  var languages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var pageCmpt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  _util__WEBPACK_IMPORTED_MODULE_0__["Ng"].element(document.getElementsByTagName('head')).append(_util__WEBPACK_IMPORTED_MODULE_0__["Ng"].element('<base href="' + location.pathname + '" />'));
  Object(_util__WEBPACK_IMPORTED_MODULE_0__["log"])('init app start...'); // All pages should use $sce and $translate

  var app = Object(_mdle__WEBPACK_IMPORTED_MODULE_2__["default"])(_global__WEBPACK_IMPORTED_MODULE_3__["APP_NAME"], _util__WEBPACK_IMPORTED_MODULE_0__["Ramda"].concat(deps, ['ngSanitize', 'pascalprecht.translate']));
  var defaultLanguage = 'zh-CN';
  var i18n = Object(_i18n__WEBPACK_IMPORTED_MODULE_1__["initI18n"])(defaultLanguage, languages);
  app.registConfig(i18n.fn);
  app.registController({
    name: _global__WEBPACK_IMPORTED_MODULE_3__["APP_CTRL_NAME"],
    fn: ["$translate", "$scope", function fn($translate, $scope) {
      'ngInject';

      this.title = _global__WEBPACK_IMPORTED_MODULE_3__["PAGE_TITLE"];

      this.broadcast = function (event, args) {
        $scope.$broadcast(event, args);
      };

      $scope.$on(_global__WEBPACK_IMPORTED_MODULE_3__["PREFIX_NATIVE_CALLBACK"] + 'get_language', function (e, language) {
        window.systemLanguage = language;
        window.utag.data.page_language = language;
      });
    }]
  });
  app.registComponent(_util__WEBPACK_IMPORTED_MODULE_0__["Ramda"].merge(pageCmpt, {
    name: _global__WEBPACK_IMPORTED_MODULE_3__["APP_PAGE_NAME"]
  }));
  _util__WEBPACK_IMPORTED_MODULE_0__["Ramda"].forEach(function (filter) {
    app.registFilter(filter);
  }, _provider_filters__WEBPACK_IMPORTED_MODULE_4__["default"]);
  Object(_util__WEBPACK_IMPORTED_MODULE_0__["log"])('app regist page success...');
  return app;
};

/***/ }),

/***/ "./src/common/global.js":
/*!******************************!*\
  !*** ./src/common/global.js ***!
  \******************************/
/*! exports provided: envs, env, APP_NAME, APP_PAGE_NAME, APP_PAGE_TAG, APP_CTRL_NAME, PAGE_TITLE, PREFIX_NATIVE_CALLBACK */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "envs", function() { return envs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "env", function() { return env; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "APP_NAME", function() { return APP_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "APP_PAGE_NAME", function() { return APP_PAGE_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "APP_PAGE_TAG", function() { return APP_PAGE_TAG; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "APP_CTRL_NAME", function() { return APP_CTRL_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PAGE_TITLE", function() { return PAGE_TITLE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PREFIX_NATIVE_CALLBACK", function() { return PREFIX_NATIVE_CALLBACK; });
var envs = {
  PROD: 'production',
  DEV: 'develop'
};
var env = envs.DEV;
var APP_NAME = 'app';
var APP_PAGE_NAME = 'appPage';
var APP_PAGE_TAG = 'app-page';
var APP_CTRL_NAME = 'AppCtrl';
var PAGE_TITLE = 'PAGE_TITLE';
var PREFIX_NATIVE_CALLBACK = 'native.callback.';

/***/ }),

/***/ "./src/common/i18n.js":
/*!****************************!*\
  !*** ./src/common/i18n.js ***!
  \****************************/
/*! exports provided: LANG_EN_US, LANG_ZH_CN, generateLangs, simpleLangs, COMMON_LANGS, initI18n */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LANG_EN_US", function() { return LANG_EN_US; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LANG_ZH_CN", function() { return LANG_ZH_CN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "generateLangs", function() { return generateLangs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "simpleLangs", function() { return simpleLangs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "COMMON_LANGS", function() { return COMMON_LANGS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initI18n", function() { return initI18n; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ "./src/common/util.js");
/* harmony import */ var _languages_en_US_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languages/en-US.json */ "./src/common/languages/en-US.json");
var _languages_en_US_json__WEBPACK_IMPORTED_MODULE_1___namespace = /*#__PURE__*/__webpack_require__.t(/*! ./languages/en-US.json */ "./src/common/languages/en-US.json", 1);
/* harmony import */ var _languages_zh_CN_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./languages/zh-CN.json */ "./src/common/languages/zh-CN.json");
var _languages_zh_CN_json__WEBPACK_IMPORTED_MODULE_2___namespace = /*#__PURE__*/__webpack_require__.t(/*! ./languages/zh-CN.json */ "./src/common/languages/zh-CN.json", 1);



var LANG_EN_US = 'en-US';
var LANG_ZH_CN = 'zh-CN';
var generateLangs = function generateLangs(enUS, zhCN) {
  var langs = {};
  langs[LANG_EN_US] = enUS;
  langs[LANG_ZH_CN] = zhCN;
  return langs;
};
var simpleLangs = generateLangs('en', 'cn');
var COMMON_LANGS = generateLangs(_languages_en_US_json__WEBPACK_IMPORTED_MODULE_1__, _languages_zh_CN_json__WEBPACK_IMPORTED_MODULE_2__);
/**
 * Set the language word JSON and the language preferred.
 * @param {string} lang The language preferred, should be 'en-US', 'zh-CN' etc.
 * @param {object} jsonLangs The i18n language JSON, like {'en-US': {}, 'zh-CN': {}}
 */

var initI18n = function initI18n(lang, jsonLangs) {
  return {
    lang: lang,
    fn: ["$translateProvider", function fn($translateProvider) {
      'ngInject'; // Check https://angular-translate.github.io/docs/#/guide/19_security for sanitize

      $translateProvider.useSanitizeValueStrategy('escape'); // sanitize 

      var allLangs = _util__WEBPACK_IMPORTED_MODULE_0__["Ramda"].mergeDeepRight(COMMON_LANGS, jsonLangs);
      _util__WEBPACK_IMPORTED_MODULE_0__["Ramda"].forEachObjIndexed(function (v, k) {
        return $translateProvider.translations(k, v);
      }, allLangs);
      $translateProvider.preferredLanguage(lang);
    }]
  };
};

/***/ }),

/***/ "./src/common/languages/en-US.json":
/*!*****************************************!*\
  !*** ./src/common/languages/en-US.json ***!
  \*****************************************/
/*! exports provided: PAGE_TITLE, default */
/***/ (function(module) {

module.exports = {"PAGE_TITLE":"AngularJS ES6 multi page demo"};

/***/ }),

/***/ "./src/common/languages/zh-CN.json":
/*!*****************************************!*\
  !*** ./src/common/languages/zh-CN.json ***!
  \*****************************************/
/*! exports provided: PAGE_TITLE, default */
/***/ (function(module) {

module.exports = {"PAGE_TITLE":"AngularJS ES6 多页面 demo"};

/***/ }),

/***/ "./src/common/mdle.js":
/*!****************************!*\
  !*** ./src/common/mdle.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./global */ "./src/common/global.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ "./src/common/util.js");



var Mdle = function Mdle(name) {
  var _this = this;

  var deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var CMPT_SUFFIX = 'Cmpt';
  var mdle = _util__WEBPACK_IMPORTED_MODULE_1__["Ng"].module(name, deps);
  var defaultComponetName = name + CMPT_SUFFIX;

  var registComponent = function registComponent(component) {
    mdle.component(component.name, component);
    return _this;
  };

  var registValue = function registValue(key, value) {
    mdle.value(key, value);
    return _this;
  };

  var registConfig = function registConfig(config) {
    mdle.config(config);
    return _this;
  };

  var registService = function registService(service) {
    mdle.service(service.name, _global__WEBPACK_IMPORTED_MODULE_0__["env"] === _global__WEBPACK_IMPORTED_MODULE_0__["envs"].DEV ? service.mockFn || service.fn : service.fn);
    return _this;
  };

  var registFactory = function registFactory(factory) {
    mdle.factory(factory.name, _global__WEBPACK_IMPORTED_MODULE_0__["env"] === _global__WEBPACK_IMPORTED_MODULE_0__["envs"].DEV ? factory.mockFn || factory.fn : factory.fn);
    return _this;
  };

  var registFilter = function registFilter(filter) {
    mdle.filter(filter.name, filter.fn);
  };

  var registController = function registController(controller) {
    mdle.controller(controller.name, controller.fn);
    return _this;
  };

  var setRoutes = function setRoutes(jsonRoutes) {
    registConfig(["$routeProvider", "$locationProvider", function ($routeProvider, $locationProvider) {
      'ngInject';

      _util__WEBPACK_IMPORTED_MODULE_1__["Ramda"].mapObjIndexed(function (route, path) {
        $routeProvider.when(path, route);
      }, jsonRoutes); // configure html5 to get links working on jsfiddle
      // $locationProvider.html5Mode(true);

      $locationProvider.hashPrefix('');
    }]);
  };

  return {
    CMPT_SUFFIX: CMPT_SUFFIX,
    name: name,
    mdle: mdle,
    defaultComponetName: defaultComponetName,
    registComponent: registComponent,
    registValue: registValue,
    registConfig: registConfig,
    registService: registService,
    registFactory: registFactory,
    registFilter: registFilter,
    registController: registController,
    setRoutes: setRoutes
  };
};

/* harmony default export */ __webpack_exports__["default"] = (Mdle);

/***/ }),

/***/ "./src/common/util.js":
/*!****************************!*\
  !*** ./src/common/util.js ***!
  \****************************/
/*! exports provided: Ramda, Ng, Rx, RxOper, log, greetings, camelCaseToDash, camelCaseToDashAdv, generateTemplate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Ramda", function() { return Ramda; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Ng", function() { return Ng; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Rx", function() { return Rx; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RxOper", function() { return RxOper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "log", function() { return log; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "greetings", function() { return greetings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "camelCaseToDash", function() { return camelCaseToDash; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "camelCaseToDashAdv", function() { return camelCaseToDashAdv; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "generateTemplate", function() { return generateTemplate; });
/*eslint no-console: ["error", { allow: ["warn", "error", "log"] }] */
var Ramda = R;
var Ng = angular;
var Rx = rxjs;
var RxOper = rxjs.operators;
var log = function log(msg) {
  console.log(msg);
};
var greetings = 'Hello from.. util!';
/**
 * camelCaseToDash('userId') => "user-id"
 * camelCaseToDash('waitAMoment') => "wait-a-moment"
 * camelCaseToDash('TurboPascal') => "turbo-pascal"
 */

function camelCaseToDash(str) {
  return str.replace(/([a-zA-Z])(?=[A-Z])/g, '$1-').toLowerCase();
}
/**
 * This version will handle imperfect camel case/pascal case with multiple capital letters in a row
 * @param {string} str 
 */

function camelCaseToDashAdv(str) {
  return str.replace(/[^a-zA-Z0-9]+/g, '-').replace(/([A-Z]+)([A-Z][a-z])/g, '$1-$2').replace(/([a-z])([A-Z])/g, '$1-$2').replace(/([0-9])([^0-9])/g, '$1-$2').replace(/([^0-9])([0-9])/g, '$1-$2').replace(/-+/g, '-').toLowerCase();
}
var generateTemplate = function generateTemplate(camelCaseName) {
  var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var tag = camelCaseToDash(camelCaseName);
  var props = Ramda.join('', Ramda.map(function (o) {
    return ' ' + o.prop + '="' + o.value + '"';
  }, properties));
  return '<' + tag + props + '></' + tag + '>';
};

/***/ }),

/***/ "./src/provider/filters.js":
/*!*********************************!*\
  !*** ./src/provider/filters.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _common_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/util */ "./src/common/util.js");

/* harmony default export */ __webpack_exports__["default"] = ([{
  name: 'reverse',
  fn: function fn() {
    return function (input) {
      return _common_util__WEBPACK_IMPORTED_MODULE_0__["Ramda"].reverse(input);
    };
  }
}, {
  name: 'checkmark',
  fn: function fn() {
    return function (input) {
      return input ? "\u2713" : "\u2718";
    };
  }
}]);

/***/ }),

/***/ "./src/provider/service-user.js":
/*!**************************************!*\
  !*** ./src/provider/service-user.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'userService',
  fn: ["$http", function fn($http) {
    'ngInject';

    this.fetch = function () {
      return $http.get('/someapi/user');
    }; // this.fetch = () => $http.post('http://localhost:8081/api/login');

  }],
  mockFn: ["$http", function mockFn($http) {
    'ngInject'; // this.fetch = () => $http.post('http://localhost:8081/api/login');

    this.fetch = function () {
      return $http.get('/stub/users.json?v=12131');
    };
  }]
});

/***/ }),

/***/ "./src/user/index.css":
/*!****************************!*\
  !*** ./src/user/index.css ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../node_modules/css-loader??ref--4-1!../../node_modules/postcss-loader/src??postcss!./index.css */ "./node_modules/css-loader/index.js?!./node_modules/postcss-loader/src/index.js?!./src/user/index.css");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./src/user/index.js":
/*!***************************!*\
  !*** ./src/user/index.js ***!
  \***************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _index_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.css */ "./src/user/index.css");
/* harmony import */ var _index_css__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_index_css__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _common_app__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/app */ "./src/common/app.js");
/* harmony import */ var _common_i18n__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/i18n */ "./src/common/i18n.js");
/* harmony import */ var _languages_en_US_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./languages/en-US.json */ "./src/user/languages/en-US.json");
var _languages_en_US_json__WEBPACK_IMPORTED_MODULE_3___namespace = /*#__PURE__*/__webpack_require__.t(/*! ./languages/en-US.json */ "./src/user/languages/en-US.json", 1);
/* harmony import */ var _languages_zh_CN_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./languages/zh-CN.json */ "./src/user/languages/zh-CN.json");
var _languages_zh_CN_json__WEBPACK_IMPORTED_MODULE_4___namespace = /*#__PURE__*/__webpack_require__.t(/*! ./languages/zh-CN.json */ "./src/user/languages/zh-CN.json", 1);
/* harmony import */ var _user__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./user */ "./src/user/user.js");
 // import { Rx, RxOper, log } from "../common/util";





 // import userPage from './user-page';

var dependencies = [// 'ngRoute',
_user__WEBPACK_IMPORTED_MODULE_5__["default"].name]; // const clicks = Rx.fromEvent(document, 'click');
// clicks.pipe(
//   RxOper.throttleTime(1000),
//   RxOper.scan(count => count + 1, 0)
// ).subscribe(count => log(`Clicked ${count} times`));
//最后一个参数loginPage为组件名称 - 转 驼峰

var app = Object(_common_app__WEBPACK_IMPORTED_MODULE_1__["InitApp"])(Object(_common_i18n__WEBPACK_IMPORTED_MODULE_2__["generateLangs"])(_languages_en_US_json__WEBPACK_IMPORTED_MODULE_3__, _languages_zh_CN_json__WEBPACK_IMPORTED_MODULE_4__), dependencies, _user__WEBPACK_IMPORTED_MODULE_5__["default"].page); // app.set

/* harmony default export */ __webpack_exports__["default"] = (app);

/***/ }),

/***/ "./src/user/languages/en-US.json":
/*!***************************************!*\
  !*** ./src/user/languages/en-US.json ***!
  \***************************************/
/*! exports provided: LOGIN, USER_NAME, Password, default */
/***/ (function(module) {

module.exports = {"LOGIN":"Login","USER_NAME":"User Name","Password":"密码"};

/***/ }),

/***/ "./src/user/languages/zh-CN.json":
/*!***************************************!*\
  !*** ./src/user/languages/zh-CN.json ***!
  \***************************************/
/*! exports provided: LOGIN, USER_NAME, Password, default */
/***/ (function(module) {

module.exports = {"LOGIN":"登录","USER_NAME":"用户名","Password":"密码"};

/***/ }),

/***/ "./src/user/user-page.html":
/*!*********************************!*\
  !*** ./src/user/user-page.html ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<!-- \r\n    <div>\r\n        <p>当前用户是：{{username}}</p>\r\n    </div>\r\n    <div class=\"row\">\r\n        <div id=\"divUserList\" class=\"col-sm-10 userList\">\r\n            <div data-ng-repeat=\"user in $ctrl.users\">\r\n            <p class=\"pUser\" data-ng-bind=\"user.name\"></p>\r\n            <p class=\"pUser\" data-ng-bind=\"user.location\"></p>\r\n            <p class=\"pUser\" data-ng-bind=\"user.age\"></p>\r\n          </div>\r\n          <div data-ng-bind=\"$ctrl.users.length\"></div>\r\n            <p>------假数据是：------</p>\r\n            <div data-ng-repeat=\"user in $ctrl.users\">\r\n                <p data-ng-bind=\"user.FIRST_NAME\"></p>\r\n                <p data-ng-bind=\"user.LAST_NAME\"></p>\r\n            </div>\r\n            <p class=\"pUser\" data-translate=\"ERROR_500\"></p>\r\n        </div>\r\n    </div>\r\n</div> -->\r\n\r\n<div class=\"container\">\r\n    <h5 data-ng-bind=\"$ctrl.currentUserType\"></h5>\r\n    <table class=\"table table-hover user-table\">\r\n      <thead>\r\n        <tr>\r\n          <th>RoleId</th>\r\n          <th>UserName</th>\r\n          <th>option</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr data-ng-repeat=\"user in $ctrl.users\">\r\n          <td data-ng-bind=\"user.username\"></td>\r\n          <td data-ng-bind=\"user.password\"></td>\r\n          <td><button class=\"btn btn-primary\" data-ng-click=\"$ctrl.filterUserName()\" data-ng-bind=\"$ctrl.option\"></button></td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n    <div>\r\n      <input type=\"text\" class=\"filter-ipt\" name=\"username\" data-ng-model=\"$ctrl.nameFilter\" />\r\n      <button class=\"btn btn-primary filter-btn\" data-ng-click=\"$ctrl.filterUserName()\">Filter</button>\r\n    </div>\r\n  </div>"

/***/ }),

/***/ "./src/user/user-page.js":
/*!*******************************!*\
  !*** ./src/user/user-page.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _user_page_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./user-page.html */ "./src/user/user-page.html");
/* harmony import */ var _user_page_html__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_user_page_html__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _user_page_pcss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./user-page.pcss */ "./src/user/user-page.pcss");
/* harmony import */ var _user_page_pcss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_user_page_pcss__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _common_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/util */ "./src/common/util.js");



var name = 'userPage'; // 引用该组件的方式：<login-page></login-page>

var bindings = {};

var controller = function controller(userService, filterFilter) {
  'ngInject'; // log(location.search.substr(4));

  var _this = this;

  var id = location.search.substr(4); // this.currentUserType = "current user is : " + (id == 1 ? "admin" : "staff");
  // this.option = "none";

  this.nameFilter = "";
  this.users = [];
  this.allUsers = [];
  userService.fetch().then(function (resp) {
    // log(this);
    _this.users = resp.data; // log(this.users);

    _this.allUsers = resp.data;

    var loginUser = _this.users.find(function (user) {
      return user.id == id;
    });

    if (loginUser.role == 0) {
      //目前有三种role admin的role为0
      _this.currentUserType = "current user is : admin.";
      _this.option = "delete";
    } else {
      _this.currentUserType = "current user is : staff.";
      _this.option = "none";
    }
  }).catch(function (err) {
    // log(this);
    _this.users = err.data; // log(this.users)
  });

  this.filterUserName = function () {
    this.users = filterFilter(this.allUsers, this.nameFilter); //参数：数据源,筛选条件
  };
};

controller.$inject = ["userService", "filterFilter"];
/* harmony default export */ __webpack_exports__["default"] = ({
  name: name,
  template: _user_page_html__WEBPACK_IMPORTED_MODULE_0___default.a,
  bindings: bindings,
  controller: controller
});

/***/ }),

/***/ "./src/user/user-page.pcss":
/*!*********************************!*\
  !*** ./src/user/user-page.pcss ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../node_modules/css-loader??ref--4-1!../../node_modules/postcss-loader/src??postcss!./user-page.pcss */ "./node_modules/css-loader/index.js?!./node_modules/postcss-loader/src/index.js?!./src/user/user-page.pcss");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./src/user/user.js":
/*!**************************!*\
  !*** ./src/user/user.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _common_mdle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/mdle */ "./src/common/mdle.js");
/* harmony import */ var _user_page__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./user-page */ "./src/user/user-page.js");
/* harmony import */ var _provider_service_user__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../provider/service-user */ "./src/provider/service-user.js");


 // import filterReverse from "../provider/filter-reverse";

var name = 'user';
var mdle = Object(_common_mdle__WEBPACK_IMPORTED_MODULE_0__["default"])(name, []);
mdle.registService(_provider_service_user__WEBPACK_IMPORTED_MODULE_2__["default"]); // mdle.registComponent(userPage);
// mdle.registFilter(filterReverse);

var page = _user_page__WEBPACK_IMPORTED_MODULE_1__["default"];
/* harmony default export */ __webpack_exports__["default"] = ({
  name: name,
  mdle: mdle,
  page: page
});

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,